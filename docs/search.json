{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-03T16:56:38-05:00"
    },
    {
      "path": "diamonds.html",
      "title": "Diamonds",
      "author": [],
      "contents": "\r\nSTA 518 Project\r\nOverview\r\nDiamonds take billions of years to form and not all of them survive the long journey. This project aims to estimate the effects on diamond prices. We run regressions using the diamonds dataset, consisting of 53,940 round diamonds and ten variables. The final model use carat, color, and clarity as variables to estimate their causality on diamond price. The model goodness of fit is evaluated by \\(R^2\\) of 0.903.\r\nData Description\r\nI have found the dataset from Kaggle website (https://www.kaggle.com/shivam2503/diamonds). It can also be downloaded from the R Tidyverse package or Ggplot2 package, called diamonds. The dataset consists of round cut diamonds from Tiffany & Co’s snapshot price list in 2017. The original dataset includes 53,940 samples and ten variables. However, this analysis will drop 20 observations after cleaning the data. There are seven numerical variables and four categorical variables.\r\nvariable\r\nType\r\nDetail\r\nprice\r\nNumeric\r\nPrice in US dollars\r\ncarat\r\nNumeric\r\nWeight of the diamond\r\ncut\r\nOrdinal\r\nQuality of the cut (Fair, Good, Very Good, Premium, Ideal)\r\ncolor\r\nOrdinal\r\nDiamond color, from D (best) to J (worst)\r\nclarity\r\nOrdinal\r\nA measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\r\nx\r\nNumeric\r\nLength in mm\r\ny\r\nNumeric\r\nWidth in mm\r\nz\r\nNumeric\r\nDepth in mm\r\ndepth\r\nNumeric\r\nTotal depth percentage\r\ntable\r\nNumeric\r\nWidth of top of diamond relative to widest point\r\nLet’s look at the diamonds dataset from the R package. We do not need to separately download the raw data file because the data is available in Ggplot2, a subset of the Tidyverse package. If you want to import the data file into R, you can use the read_csv function in the comment below. Then, we can use the glimpse function to look at raw data.\r\n\r\n\r\n#diamonds <- read_csv(here::here(\"data\", \"diamonds.csv\")) \r\nglimpse(diamonds)  \r\n\r\n\r\nRows: 53,940\r\nColumns: 10\r\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22~\r\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very~\r\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J~\r\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, ~\r\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1~\r\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, ~\r\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 33~\r\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87~\r\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78~\r\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49~\r\n\r\nData cleaning and preparation\r\nThe diamonds data requires small cleaning because it is very clean and well organized. As I will run regression models, I have decided to convert the three ordinal variables to numeric scales. I also assume that the scale for color and clarity variables is equally scaled across the levels. In addition, I remove observation with value zero in x, y and z variables because it does not make sense if the dimension is zero. The dataset now has 53,920 samples and ten variables.\r\n\r\n\r\n# use plyr::revalue to convert cut, color, and clarity scales to number\r\ndata <- diamonds\r\ndata$color <- as.numeric(revalue(data$color, c(\"D\"=1, \"E\"=2, \"F\"=3, \"G\"=4, \"H\"=5, \"I\"=6, \"J\"=7)))\r\ndata$clarity <- as.numeric(revalue(data$clarity, c(\"IF\"=8, \"VVS1\"=7, \"VVS2\"=6, \"VS1\"=5, \"VS2\"=4, \"SI1\"=3, \"SI2\"=2, \"I1\"=1)))\r\ndata$cut <- as.numeric(revalue(data$cut, c(\"Fair\"=1, \"Good\"=2, \"Very Good\"=3, \"Premium\"=4, \"Ideal\"=5)))\r\n\r\ndata <- data %>%\r\n  filter(x>0, y>0, z>0) \r\n\r\n#describe(data, ranges = FALSE)\r\nsummary(data)\r\n\r\n\r\n     carat             cut            color          clarity     \r\n Min.   :0.2000   Min.   :1.000   Min.   :1.000   Min.   :1.000  \r\n 1st Qu.:0.4000   1st Qu.:3.000   1st Qu.:2.000   1st Qu.:3.000  \r\n Median :0.7000   Median :4.000   Median :4.000   Median :4.000  \r\n Mean   :0.7977   Mean   :3.904   Mean   :3.594   Mean   :4.052  \r\n 3rd Qu.:1.0400   3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:5.000  \r\n Max.   :5.0100   Max.   :5.000   Max.   :7.000   Max.   :8.000  \r\n     depth           table           price             x         \r\n Min.   :43.00   Min.   :43.00   Min.   :  326   Min.   : 3.730  \r\n 1st Qu.:61.00   1st Qu.:56.00   1st Qu.:  949   1st Qu.: 4.710  \r\n Median :61.80   Median :57.00   Median : 2401   Median : 5.700  \r\n Mean   :61.75   Mean   :57.46   Mean   : 3931   Mean   : 5.732  \r\n 3rd Qu.:62.50   3rd Qu.:59.00   3rd Qu.: 5323   3rd Qu.: 6.540  \r\n Max.   :79.00   Max.   :95.00   Max.   :18823   Max.   :10.740  \r\n       y                z        \r\n Min.   : 3.680   Min.   : 1.07  \r\n 1st Qu.: 4.720   1st Qu.: 2.91  \r\n Median : 5.710   Median : 3.53  \r\n Mean   : 5.735   Mean   : 3.54  \r\n 3rd Qu.: 6.540   3rd Qu.: 4.04  \r\n Max.   :58.900   Max.   :31.80  \r\n\r\nDistribution and normality of each variable\r\nIn this section, we will explore the distribution and normality using the plot_normality() function in the Dlookr package. The function provides normality diagnosis of each variable, including distribution of the original data (upper left), Q-Q plot (upper right), and transformation using log and square root (bottom).\r\n\r\n\r\ndlookr::plot_normality(data)\r\n\r\n\r\n\r\n\r\nExploratory Data Analysis (EDA)\r\nPie chart of the Diamond Cut\r\nThe pie chart shows the diamond cut ratio. Overall, the diamond quality cut was excellent, with 40 percent accounting for ideal quality, 26 percent for premium quality, 22 percent for very good quality, 3 percent was fair quality.\r\n\r\n\r\ndiamonds%>%\r\n  filter(x>0, y>0, z>0)%>%\r\n  group_by(cut)%>%\r\n  dplyr::summarise(count=n())%>%\r\n  mutate(percent_data=paste(as.character(round(count*100/53920),2),\"%\"))%>% \r\n  ggplot(aes(x=\"\",y=count, fill=cut))+\r\n  geom_bar(stat=\"identity\", width=1)+\r\n  coord_polar(\"y\", start=0)+\r\n  scale_fill_brewer(palette=\"Blues\")+\r\n  geom_text(aes(label = percent_data), \r\n            position = position_stack(vjust = 0.5))+\r\n  theme_void()+\r\n  labs(title = \"Pie chart of the Diamond Cut\")\r\n\r\n\r\n\r\n\r\nDiamond Frequency by Color\r\nThe bar chart demonstrates the frequency of the color level. The majority of data consist of color level G at 11,284 observations. In addition, 6,674 diamonds have color level D, which is colorless. The lowest frequency is color level J, which is more yellow than other levels.\r\n\r\n\r\ndiamonds%>%\r\n  filter(x>0, y>0, z>0)%>%\r\n  group_by(color)%>%\r\n  dplyr::summarise(count=n())%>%\r\n  ggplot(aes(x=color,count,y=count, fill=color))+\r\n  geom_bar(stat=\"identity\", colour=\"black\")+\r\n  scale_fill_manual(values=c(\"#ffffff\", \"#fefcf3\", \"#fdfaeb\", \"#fdf8e4\", \"#fcf6dc\", \"#fcf5d4\", \"#fbf3cd\"))+\r\n  labs(title = \"Diamond Frequency by Color\", x=\"Color of Diamond\", y=\"Count\")+\r\n  theme_bw()+\r\n  theme(legend.position = \"none\",\r\n    panel.grid.major.x = element_blank(),\r\n    panel.border = element_blank(),\r\n    axis.ticks.x = element_blank())+\r\n  geom_text(aes(label = count, vjust = -0.4))\r\n\r\n\r\n\r\n\r\nDiamond Frequency by Clarity Level\r\nThe lollipop chart presents the data frequency by clarity color. Most diamonds are slightly included, such as VS2, SI1, and SI2 levels. There are 1,790 internally flawless diamonds. The included diamond is the smallest at only 738 observations.\r\n\r\n\r\ndiamonds%>%\r\n  filter(x>0, y>0, z>0)%>%\r\n  group_by(clarity)%>%\r\n  dplyr::summarise(count=n())%>%\r\n  ggplot(aes(x=clarity, y=count))+\r\n  geom_segment( aes(x=clarity, xend=clarity, y=0, yend=count), color=\"grey\")+\r\n  geom_point( color=\"gold\", size=4, alpha=0.6)+\r\n  theme_light()+\r\n  coord_flip()+\r\n  labs(title=\"Diamond Frequency by Clarity Level\", x=\"Clarity Level\", y=\"Count\")+\r\n  theme(\r\n    panel.grid.major.y = element_blank(),\r\n    panel.border = element_blank(),\r\n    axis.ticks.x = element_blank())+\r\n    geom_text(aes(label = count, vjust = -1))\r\n\r\n\r\n\r\n\r\nDiamond Price, Carat, and Cut\r\nLet’s explore more about the relations between price, carat, and cut. The scatter plot shows that the better cut quality with the same carat has a higher price.\r\n\r\n\r\ndiamonds%>%\r\n  filter(x>0, y>0, z>0)%>%\r\n  ggplot(aes(carat, price, colour = as.factor(cut))) + geom_point()+\r\n  labs(title = \"Scatter plot of Price and Carat by Cut Quality\", x=\"Carat\", y=\"Diamond Price\", fill=\"Cut Quality\")\r\n\r\n\r\n\r\ndiamonds%>%\r\n  filter(x>0, y>0, z>0)%>%\r\n  ggplot(aes(price, carat, fill = as.factor(cut))) + geom_boxplot()+\r\n  labs(title = \"Boxplot of Price and Carat by Cut Quality\", x=\"Diamond Price\", y=\"Carat\", fill=\"Cut Quality\")+\r\n  coord_flip()\r\n\r\n\r\n\r\n\r\nBefore moving on to the next step, I want to check all the variable names in the dataset for validation and easily include them in the following sections.\r\n\r\n\r\ncolnames(data)\r\n\r\n\r\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"  \r\n [7] \"price\"   \"x\"       \"y\"       \"z\"      \r\n\r\nCorrelations\r\nThe correlation plot below shows relationships between the dependent variable and independent variables. Variable x, y, and z have significantly high positive relations with each other at more than 0.96. All three variables are also highly correlated to the carat variable. In contrast, the relations between the dependent variable with the quality of cut and the diamond depth is very small negative relation. Therefore, I will remove variables x, y, and z to prevent multicollinearity.\r\n\r\n\r\n# require library(ggstatsplot)\r\nggstatsplot::ggcorrmat(\r\n  data = cor_data,\r\n  type = \"parametric\", # parametric for Pearson, nonparametric for Spearman's correlation\r\n  colors = c(\"darkred\", \"white\", \"steelblue\") # change default colors\r\n)\r\n\r\n\r\n\r\n\r\nVariance Inflation Factor (VIF)\r\nUse variance inflation factor (VIF) to check that there are no two or more independent variables that predict each other.\r\n\r\n\r\nlibrary(regclass)\r\nVIF(lm(price~carat+cut+color+clarity+depth+table+x+y+z, data=data))\r\n\r\n\r\n    carat       cut     color   clarity     depth     table         x \r\n24.838037  1.483701  1.120603  1.230140  1.807764  1.580987 64.340380 \r\n        y         z \r\n20.733711 29.940364 \r\n\r\nVIF(lm(price~carat+cut+color+clarity+depth+table, data=data))\r\n\r\n\r\n   carat      cut    color  clarity    depth    table \r\n1.297629 1.482007 1.118782 1.200325 1.320529 1.576594 \r\n\r\nModel selection\r\nData division into train data and test data\r\nWe will randomly divide the data into two groups: train and test data. First, we set the seed to ensure that we will get the same random result after running the code and the same interpretation. Seventy percent of the data or 37744 observations is the train data. The train data will be used to predict the model, and the test data will be used to fit the final model to observe the model accuracy.\r\n\r\n\r\ndata2 <- data %>% \r\n  dplyr::select(price,carat,cut,color,clarity,depth,table,x,y,z)\r\n\r\n# split data for training data and test data\r\nset.seed(789) # set seed to gain the same random pattern\r\ntrain = data2 %>%\r\nsample_frac(0.7)\r\ntest = data2 %>%\r\nsetdiff(train)\r\n\r\n\r\n\r\nSubsetting\r\nThe below charts illustrate the different values of \\(BIC\\), \\(C_{p}\\), \\(R^2\\), and \\(adjusted R^2\\), regarding the different number of variables in the model. According to the charts, adding depth and table variables have almost no contribution to the model. Hence, we will not consider adding depth and table variables to the model. In addition, adding the quality of diamond cut in the model appear small change to the model. So, I will compare the model containing 4 variables (carat, cut, color, and clarity) and 3 variables (carat, color, and clarity).\r\n\r\n\r\n# require library(leaps)\r\nregfit_full = regsubsets(price ~ carat+cut+color+clarity+depth+table, data=train)\r\nsummary(regfit_full)\r\n\r\n\r\nSubset selection object\r\nCall: regsubsets.formula(price ~ carat + cut + color + clarity + depth + \r\n    table, data = train)\r\n6 Variables  (and intercept)\r\n        Forced in Forced out\r\ncarat       FALSE      FALSE\r\ncut         FALSE      FALSE\r\ncolor       FALSE      FALSE\r\nclarity     FALSE      FALSE\r\ndepth       FALSE      FALSE\r\ntable       FALSE      FALSE\r\n1 subsets of each size up to 6\r\nSelection Algorithm: exhaustive\r\n         carat cut color clarity depth table\r\n1  ( 1 ) \"*\"   \" \" \" \"   \" \"     \" \"   \" \"  \r\n2  ( 1 ) \"*\"   \" \" \" \"   \"*\"     \" \"   \" \"  \r\n3  ( 1 ) \"*\"   \" \" \"*\"   \"*\"     \" \"   \" \"  \r\n4  ( 1 ) \"*\"   \"*\" \"*\"   \"*\"     \" \"   \" \"  \r\n5  ( 1 ) \"*\"   \"*\" \"*\"   \"*\"     \"*\"   \" \"  \r\n6  ( 1 ) \"*\"   \"*\" \"*\"   \"*\"     \"*\"   \"*\"  \r\n\r\nplot(regfit_full, scale=\"bic\", col=c(\"#51e2f5\",\"#9df9ef\", \"#a28089\"))\r\n\r\n\r\n\r\nplot(regfit_full, scale=\"Cp\", col=c(\"#51e2f5\",\"#9df9ef\", \"#a28089\"))\r\n\r\n\r\n\r\nplot(regfit_full, scale=\"r2\", col=c(\"#83af9b\",\"#c8c8a9\", \"#f9cdad\"))\r\n\r\n\r\n\r\nplot(regfit_full, scale=\"adjr2\", col=c(\"#83af9b\",\"#c8c8a9\", \"#f9cdad\"))\r\n\r\n\r\n\r\n\r\nRegression Model\r\nModel with 4 variables:\r\nprice = -4974.997 + 8776.430 x carat + 165.511 x cut - 318.820 x color + 518.648 x clarity\r\nThe estimated effects of carat, cut, color, and clarity on diamond price are 8776, 165, -318, and 518, respectively. Hence, 1 unit increase in clarity will result in 518 dollars in diamond price.\r\n\r\n\r\nfit_lm4 <- lm(price ~ carat+cut+color+clarity, data = train)\r\nknitr::kable(fit_lm4 %>% broom::tidy())\r\n\r\n\r\n\r\nterm\r\n\r\n\r\nestimate\r\n\r\n\r\nstd.error\r\n\r\n\r\nstatistic\r\n\r\n\r\np.value\r\n\r\n\r\n(Intercept)\r\n\r\n\r\n-4674.9974\r\n\r\n\r\n32.875915\r\n\r\n\r\n-142.20129\r\n\r\n\r\n0\r\n\r\n\r\ncarat\r\n\r\n\r\n8776.4296\r\n\r\n\r\n15.103499\r\n\r\n\r\n581.08586\r\n\r\n\r\n0\r\n\r\n\r\ncut\r\n\r\n\r\n165.5113\r\n\r\n\r\n5.791472\r\n\r\n\r\n28.57845\r\n\r\n\r\n0\r\n\r\n\r\ncolor\r\n\r\n\r\n-318.8205\r\n\r\n\r\n3.930478\r\n\r\n\r\n-81.11494\r\n\r\n\r\n0\r\n\r\n\r\nclarity\r\n\r\n\r\n518.6481\r\n\r\n\r\n4.199093\r\n\r\n\r\n123.51433\r\n\r\n\r\n0\r\n\r\n\r\nknitr::kable(fit_lm4 %>% broom::augment()%>%slice(1:10))\r\n\r\n\r\n\r\nprice\r\n\r\n\r\ncarat\r\n\r\n\r\ncut\r\n\r\n\r\ncolor\r\n\r\n\r\nclarity\r\n\r\n\r\n.fitted\r\n\r\n\r\n.resid\r\n\r\n\r\n.hat\r\n\r\n\r\n.sigma\r\n\r\n\r\n.cooksd\r\n\r\n\r\n.std.resid\r\n\r\n\r\n3985\r\n\r\n\r\n0.93\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n3\r\n\r\n\r\n4276.4804\r\n\r\n\r\n-291.48038\r\n\r\n\r\n0.0000915\r\n\r\n\r\n1228.048\r\n\r\n\r\n1.00e-06\r\n\r\n\r\n-0.2373664\r\n\r\n\r\n1046\r\n\r\n\r\n0.31\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n7\r\n\r\n\r\n1062.9956\r\n\r\n\r\n-16.99564\r\n\r\n\r\n0.0001218\r\n\r\n\r\n1228.049\r\n\r\n\r\n0.00e+00\r\n\r\n\r\n-0.0138406\r\n\r\n\r\n2959\r\n\r\n\r\n0.70\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n5\r\n\r\n\r\n3601.8162\r\n\r\n\r\n-642.81617\r\n\r\n\r\n0.0000627\r\n\r\n\r\n1228.044\r\n\r\n\r\n3.40e-06\r\n\r\n\r\n-0.5234685\r\n\r\n\r\n4876\r\n\r\n\r\n1.01\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n3\r\n\r\n\r\n4978.5947\r\n\r\n\r\n-102.59474\r\n\r\n\r\n0.0000909\r\n\r\n\r\n1228.049\r\n\r\n\r\n1.00e-07\r\n\r\n\r\n-0.0835478\r\n\r\n\r\n630\r\n\r\n\r\n0.30\r\n\r\n\r\n1\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\n-958.2540\r\n\r\n\r\n1588.25397\r\n\r\n\r\n0.0002789\r\n\r\n\r\n1228.022\r\n\r\n\r\n9.33e-05\r\n\r\n\r\n1.2935125\r\n\r\n\r\n462\r\n\r\n\r\n0.26\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n-566.4312\r\n\r\n\r\n1028.43123\r\n\r\n\r\n0.0001176\r\n\r\n\r\n1228.037\r\n\r\n\r\n1.65e-05\r\n\r\n\r\n0.8375118\r\n\r\n\r\n734\r\n\r\n\r\n0.31\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n5\r\n\r\n\r\n663.3404\r\n\r\n\r\n70.65957\r\n\r\n\r\n0.0000691\r\n\r\n\r\n1228.049\r\n\r\n\r\n0.00e+00\r\n\r\n\r\n0.0575408\r\n\r\n\r\n2936\r\n\r\n\r\n0.74\r\n\r\n\r\n5\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n3765.2478\r\n\r\n\r\n-829.24785\r\n\r\n\r\n0.0000560\r\n\r\n\r\n1228.041\r\n\r\n\r\n5.10e-06\r\n\r\n\r\n-0.6752843\r\n\r\n\r\n1294\r\n\r\n\r\n0.44\r\n\r\n\r\n5\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n2288.6081\r\n\r\n\r\n-994.60807\r\n\r\n\r\n0.0001169\r\n\r\n\r\n1228.038\r\n\r\n\r\n1.53e-05\r\n\r\n\r\n-0.8099673\r\n\r\n\r\n4201\r\n\r\n\r\n0.91\r\n\r\n\r\n4\r\n\r\n\r\n5\r\n\r\n\r\n4\r\n\r\n\r\n4454.0886\r\n\r\n\r\n-253.08858\r\n\r\n\r\n0.0000450\r\n\r\n\r\n1228.048\r\n\r\n\r\n4.00e-07\r\n\r\n\r\n-0.2060974\r\n\r\n\r\nknitr::kable(fit_lm4 %>% broom::glance())\r\n\r\n\r\n\r\nr.squared\r\n\r\n\r\nadj.r.squared\r\n\r\n\r\nsigma\r\n\r\n\r\nstatistic\r\n\r\n\r\np.value\r\n\r\n\r\ndf\r\n\r\n\r\nlogLik\r\n\r\n\r\nAIC\r\n\r\n\r\nBIC\r\n\r\n\r\ndeviance\r\n\r\n\r\ndf.residual\r\n\r\n\r\nnobs\r\n\r\n\r\n0.9050811\r\n\r\n\r\n0.905071\r\n\r\n\r\n1228.033\r\n\r\n\r\n89963.22\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n-322033.4\r\n\r\n\r\n644078.7\r\n\r\n\r\n644129.9\r\n\r\n\r\n56912825216\r\n\r\n\r\n37739\r\n\r\n\r\n37744\r\n\r\n\r\nres_function <- function(mod){\r\n  par(mfrow = c(2, 2))  \r\nplot(mod)\r\n}\r\n\r\nres_function(fit_lm4)\r\n\r\n\r\n\r\n\r\nModel with 3 variables:\r\nprice = -4075.927 + 8746.191 x carat - 319.215 x color + 536.701 x clarity\r\nThe estimated effect of carat on diamond price is 8746, the estimated effect of color is -319, and the estimated effect of clarity is 537.\r\n\r\n\r\nfit_lm3 <- lm(price ~ carat+color+clarity, data = train)\r\nknitr::kable(fit_lm3 %>% broom::tidy())\r\n\r\n\r\n\r\nterm\r\n\r\n\r\nestimate\r\n\r\n\r\nstd.error\r\n\r\n\r\nstatistic\r\n\r\n\r\np.value\r\n\r\n\r\n(Intercept)\r\n\r\n\r\n-4075.9265\r\n\r\n\r\n25.598245\r\n\r\n\r\n-159.22680\r\n\r\n\r\n0\r\n\r\n\r\ncarat\r\n\r\n\r\n8746.1914\r\n\r\n\r\n15.228347\r\n\r\n\r\n574.33625\r\n\r\n\r\n0\r\n\r\n\r\ncolor\r\n\r\n\r\n-319.2149\r\n\r\n\r\n3.972704\r\n\r\n\r\n-80.35203\r\n\r\n\r\n0\r\n\r\n\r\nclarity\r\n\r\n\r\n536.7005\r\n\r\n\r\n4.195932\r\n\r\n\r\n127.90972\r\n\r\n\r\n0\r\n\r\n\r\nknitr::kable(fit_lm3 %>% broom::augment()%>%slice(1:10))\r\n\r\n\r\n\r\nprice\r\n\r\n\r\ncarat\r\n\r\n\r\ncolor\r\n\r\n\r\nclarity\r\n\r\n\r\n.fitted\r\n\r\n\r\n.resid\r\n\r\n\r\n.hat\r\n\r\n\r\n.sigma\r\n\r\n\r\n.cooksd\r\n\r\n\r\n.std.resid\r\n\r\n\r\n3985\r\n\r\n\r\n0.93\r\n\r\n\r\n5\r\n\r\n\r\n3\r\n\r\n\r\n4072.0588\r\n\r\n\r\n-87.05878\r\n\r\n\r\n0.0000575\r\n\r\n\r\n1241.250\r\n\r\n\r\n1.00e-07\r\n\r\n\r\n-0.0701410\r\n\r\n\r\n1046\r\n\r\n\r\n0.31\r\n\r\n\r\n4\r\n\r\n\r\n7\r\n\r\n\r\n1115.4371\r\n\r\n\r\n-69.43714\r\n\r\n\r\n0.0001195\r\n\r\n\r\n1241.250\r\n\r\n\r\n1.00e-07\r\n\r\n\r\n-0.0559454\r\n\r\n\r\n2959\r\n\r\n\r\n0.70\r\n\r\n\r\n3\r\n\r\n\r\n5\r\n\r\n\r\n3772.2656\r\n\r\n\r\n-813.26557\r\n\r\n\r\n0.0000391\r\n\r\n\r\n1241.243\r\n\r\n\r\n4.20e-06\r\n\r\n\r\n-0.6552205\r\n\r\n\r\n4876\r\n\r\n\r\n1.01\r\n\r\n\r\n5\r\n\r\n\r\n3\r\n\r\n\r\n4771.7541\r\n\r\n\r\n104.24590\r\n\r\n\r\n0.0000562\r\n\r\n\r\n1241.250\r\n\r\n\r\n1.00e-07\r\n\r\n\r\n0.0839881\r\n\r\n\r\n630\r\n\r\n\r\n0.30\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\n-480.3972\r\n\r\n\r\n1110.39722\r\n\r\n\r\n0.0000935\r\n\r\n\r\n1241.236\r\n\r\n\r\n1.87e-05\r\n\r\n\r\n0.8946337\r\n\r\n\r\n462\r\n\r\n\r\n0.26\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n-714.4884\r\n\r\n\r\n1176.48837\r\n\r\n\r\n0.0000998\r\n\r\n\r\n1241.235\r\n\r\n\r\n2.24e-05\r\n\r\n\r\n0.9478856\r\n\r\n\r\n734\r\n\r\n\r\n0.31\r\n\r\n\r\n2\r\n\r\n\r\n5\r\n\r\n\r\n680.4658\r\n\r\n\r\n53.53422\r\n\r\n\r\n0.0000689\r\n\r\n\r\n1241.250\r\n\r\n\r\n0.00e+00\r\n\r\n\r\n0.0431314\r\n\r\n\r\n2936\r\n\r\n\r\n0.74\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\n3585.4127\r\n\r\n\r\n-649.41268\r\n\r\n\r\n0.0000298\r\n\r\n\r\n1241.245\r\n\r\n\r\n2.00e-06\r\n\r\n\r\n-0.5232074\r\n\r\n\r\n1294\r\n\r\n\r\n0.44\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n2136.6855\r\n\r\n\r\n-842.68552\r\n\r\n\r\n0.0000982\r\n\r\n\r\n1241.242\r\n\r\n\r\n1.13e-05\r\n\r\n\r\n-0.6789432\r\n\r\n\r\n4201\r\n\r\n\r\n0.91\r\n\r\n\r\n5\r\n\r\n\r\n4\r\n\r\n\r\n4433.8355\r\n\r\n\r\n-232.83550\r\n\r\n\r\n0.0000447\r\n\r\n\r\n1241.249\r\n\r\n\r\n4.00e-07\r\n\r\n\r\n-0.1875882\r\n\r\n\r\nknitr::kable(fit_lm3 %>% broom::glance())\r\n\r\n\r\n\r\nr.squared\r\n\r\n\r\nadj.r.squared\r\n\r\n\r\nsigma\r\n\r\n\r\nstatistic\r\n\r\n\r\np.value\r\n\r\n\r\ndf\r\n\r\n\r\nlogLik\r\n\r\n\r\nAIC\r\n\r\n\r\nBIC\r\n\r\n\r\ndeviance\r\n\r\n\r\ndf.residual\r\n\r\n\r\nnobs\r\n\r\n\r\n0.9030269\r\n\r\n\r\n0.9030192\r\n\r\n\r\n1241.233\r\n\r\n\r\n117146.7\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n-322437.4\r\n\r\n\r\n644884.8\r\n\r\n\r\n644927.5\r\n\r\n\r\n58144503086\r\n\r\n\r\n37740\r\n\r\n\r\n37744\r\n\r\n\r\nres_function(fit_lm3)\r\n\r\n\r\n\r\n\r\nConclusion\r\nThe models consisting of 3 variables and 4 variables represent slightly different values. The estimated effects of variables on diamonds price are about the same in each model. The R-squared of 3 variable model (\\(R^2\\) = 0.903) is only 2.5 percent less than that of 4 variable model. Both models present high t-value with significant p-value. Therefore, I consider choosing the 3 variable model, including, carat, color, and clarity. This is because the model is simpler and almost as effective as the model with 4 variables.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-03T17:01:07-05:00"
    },
    {
      "path": "index.html",
      "title": "Kanyanee's Project",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-03T17:01:08-05:00"
    },
    {
      "path": "projects.html",
      "title": "Projects",
      "author": [],
      "contents": "\r\nDiamond price project\r\nThis project use regression analysis to predict diamond price. Link\r\nQQ-Plot R Shiny\r\nThis is si\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-03T17:01:10-05:00"
    },
    {
      "path": "qqplot.html",
      "title": "qqplot",
      "author": [],
      "contents": "\r\nThis app aims to observe the Q-Q plot and normal distribution, link to the app: https://kanyanee.shinyapps.io/qqplot/.\r\nHow to use the app?\r\nStep 1: Pick the mean, standard deviation, and sample size.\r\nStep 2: Click on the Random button.\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-03T17:01:11-05:00"
    },
    {
      "path": "README.html",
      "author": [],
      "contents": "\r\nKanyanee’s Website\r\nLink to the website: https://manapradit.github.io/manaprak-distill/\r\n\r\n\r\n",
      "last_modified": "2021-12-03T17:01:11-05:00"
    }
  ],
  "collections": []
}
